// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  phone          String?   @unique
  emailVerified  DateTime?
  image          String?
  review         String?
  hashedPassword String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  packageName    String
  destination    String
  citiesCovered  String[]
  departureCity  String
  nights         Int
  days           Int
  flights        Boolean?
  visa_fees      Boolean?
  hotelStar      Int
  breakfast      Boolean?
  lunch          Boolean?
  dinner         Boolean?
  sightseeing    Boolean?
  transfers      Boolean?
  price          Int
  emi            Boolean?
  emiMonths      Int?
  departureDates DateTime?
  keyHighlights  String?
  itenary        String?
  inclusions     String?
  exclusions     String?
  tnc            String?
  imageSrc       String
  createdAt      DateTime  @default(now())
  catagory       String
  locationValue  String
  userId         String    @db.ObjectId
  review         String?

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
